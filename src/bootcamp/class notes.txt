Java Boot Camp

	Review Topics:
		1. Primitives: int, double, char, boolean
		2. Primitive Type Castings: Implicit vs Explicit
		3. Wrapper class
		4. String
		5. String vs StringBuilder vs StringBuffer
		6. Loops: for & while
		7. Array
		8. for each loop
		9. Custom Methods
		10. Method Overloading
		11. Constructor
		12. Class & Objects
		13. Static vs Instance
		14. Import Statements
		15. Access Modifiers
		16. OOP Encapsulations
		17. OOP Inheritance
		18. Method Overriding
		19. Final keyword
		20. OOP Abstraction
		21. Abstract Class vs Interface
		22. OOP Polymorphism
		23. Reference Type Castings: Upcasting vs DownCasting
		24. Exceptions: checked & unchecked
		25. Exception Handlings
		26. final vs finally vs finalize
		27. garbage collection & garbage collector
		28. Collections: List, Set
		29. Iterable & Iterator
		30. Maps


1. Primitives: byte < short < int < long < float < double
			char, boolean

			DataType  Var  = Data

2. Primitive Type castings:
			
			implicit casting: smaller primitive type to larger primitive type

			explicit casting: larger primitive type to smaller primitive type



3. Wrapper class: the object type of the primitives
		
		Byte, Short, Integer ....

		parse methods
		valueOf methods

		autoboxing
		unboxing



4. Sequence of characters:
			
			String: immutable

				substring(), length(), charAt(), lower/case, replace, trim, equals/ignorecase

			StringBuilder: mutable. 

			StringBuffer: mutable. synchronized



6. Loops:  for & while

	for loop: iteration number is fixed/known

					i=0;           i < 10      i++
			for(initialization; conidtion;  Iterator){
				statements that needs to be repeated
			}


	While loop: number of iteration is unknown

			while(condition){
				statements that needs to be repeated
			}


			while(resultSet.hasNext()){

			}

	do-while loop: at least gets executed once




7. Array: Data Structures
		 size is fixed. faster
		 supports both primitives and non primitives
		 can be multidimensional


8. for each loop: there must be a data structure
				  number of iterations and order of the iteratiosn are fixed


9. Custom Methods: Set of instruction that can perform a task
	
		AM ReturnType MethodName(Parameter){
				Codes fragments that are needed to perform the desired task
		}

		improves the reusability of our codes



10. Method Overloading: multiple methods having the same method name
						Parameters MUST be different
						Happens in same class


11. Constructor:  used when we create objects from the class.
				execution depends on the object
		
		AM className(parameters){
			codes
		}


		BasePage:

			public BasePage(){
				PageFactory.initElement(driver, this)
			}


			@FindBy


			HomePage extends BasePage

			SecondPage extends BasePage


		Driver:


			private Driver(){

			}

			static WebDriver;

			getDriver(){

			}



12. Class & Objects:  
		class is a template/blueprint of object, where the object came from. determines how the object should be created and how the object should behave

		Object is result of the class. one instance of a class, each object will have its own memory



13. Static vs Instance:

		instance: belongs to object. Multiple copies, each object has its own copy

		static: belong to class. one copy, all objects will share same copy
	
		

14. import statements:
		
		regular import:
			import package.class


		static import:
			import static package.class.member


15. Access Modifiers:
		
		private < default < protected < public

		private: visible within the class ONLY

		default: visible within the same package

		protected: always visible within the same package. also visible outside the packages to subclasses

		public: always visible



16. OOP Encapsulations: hiding the data by declaring them private.
						
						use the public getter/setter to read/write the data

						Getter: Read ONLY
								returns the value of the private instance variable
								0 parameters

						Setter: Write ONLY
								does not return any value
								1 qparameter


				In my framework i used it in POJO classes



17. OOP Inheritance: building parent & child relations between classes

					extends
					implements

					classA extends classB
					interfaceA extends interfaceB, interfaceC..

					classA implements interfaceB

					classA extends classB implement interfaceC


					subclass (child): can inherit all the visible variable & methods ONLY

					superclass (parent): does not inherit anything


					BasePage:
						public BasePage(){
							PageFactory.initElement(driver, this)
						}


						@FindBy


						HomePage extends BasePage

						SecondPage extends BasePage





					TestBase:
						@BeforeMethod{
							Open Browser
							implicitwait
							Maximize
							navigate
						}

						@AfterMethod{
							close the browser

							takescreenshot and addit to the report if failed
						}



					TestCases1 extends TestBase:

						@Test{
							
						}

						@Test{
							
						
						}

						@Test{
							
						
						}



18. Method Overriding: giving different implementatiosn to a method
						must happen in subclass

						method name, parameters, retyrn types are same
						AM same or more visible

						can not override: static, final, private methods



19. Final keyword:








